name: Deploy Gmail Article Search Agent

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  GOOGLE_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GOOGLE_REGION: us-central1
  GAR_REPOSITORY: gmail-article-search

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        pip install -r config/requirements.txt
        pip install pytest pytest-asyncio

    - name: Run unit tests
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASS: testpassword
        DB_NAME: testdb
        REDIS_URL: redis://localhost:6379
      run: |
        cd tests
        python -m pytest test_new_architecture.py -v

    - name: Run integration tests
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASS: testpassword
        DB_NAME: testdb
        REDIS_URL: redis://localhost:6379
      run: |
        cd tests
        python comprehensive_system_test.py

  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Configure Docker for GCP
      run: |
        gcloud auth configure-docker ${{ env.GOOGLE_REGION }}-docker.pkg.dev

    - name: Build and push backend image
      run: |
        docker build -t ${{ env.GOOGLE_REGION }}-docker.pkg.dev/${{ env.GOOGLE_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/backend:${{ github.sha }} ./backend
        docker push ${{ env.GOOGLE_REGION }}-docker.pkg.dev/${{ env.GOOGLE_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/backend:${{ github.sha }}

    - name: Build and push frontend image
      run: |
        docker build -t ${{ env.GOOGLE_REGION }}-docker.pkg.dev/${{ env.GOOGLE_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/frontend:${{ github.sha }} ./frontend
        docker push ${{ env.GOOGLE_REGION }}-docker.pkg.dev/${{ env.GOOGLE_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/frontend:${{ github.sha }}

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Terraform Init
      working-directory: infrastructure/terraform/environments/dev
      run: terraform init

    - name: Terraform Plan
      working-directory: infrastructure/terraform/environments/dev
      env:
        TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
        TF_VAR_image_tag: ${{ github.sha }}
        TF_VAR_environment: dev
      run: terraform plan

    - name: Terraform Apply
      working-directory: infrastructure/terraform/environments/dev
      env:
        TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
        TF_VAR_image_tag: ${{ github.sha }}
        TF_VAR_environment: dev
      run: terraform apply -auto-approve

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Terraform Init
      working-directory: infrastructure/terraform/environments/prod
      run: terraform init

    - name: Terraform Plan
      working-directory: infrastructure/terraform/environments/prod
      env:
        TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
        TF_VAR_image_tag: ${{ github.sha }}
        TF_VAR_environment: prod
      run: terraform plan

    - name: Terraform Apply
      working-directory: infrastructure/terraform/environments/prod
      env:
        TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
        TF_VAR_image_tag: ${{ github.sha }}
        TF_VAR_environment: prod
      run: terraform apply -auto-approve
